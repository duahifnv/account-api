version: '3.8'

services:
  app:
    image: accountapi:latest
    container_name: accountapi
    build:
      context: ./
      dockerfile: ./docker/spring-boot/Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    volumes:
      - ./src/main/resources/application.yml:/config/application.yml
      - ./src/main/resources/application-prod.yml:/config/application-prod.yml
      - ./docker/initdb:/docker-entrypoint-initdb.d
      - maven_data:/root/.m2/repository
    depends_on:
      - postgres
    ports:
      - 8080:8080
    networks:
      - dev
  dev-app:
    image: accountapi:latest
    container_name: accountapi
    build:
      context: ./
      dockerfile: ./docker/spring-boot/Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    volumes:
      - ./src/main/resources/application.yml:/config/application.yml
      - ./src/main/resources/application-dev.yml:/config/application-dev.yml
      - ./src/main/resources/application-prod.yml:/config/application-prod.yml
      - ./docker/initdb:/docker-entrypoint-initdb.d
      - maven_data:/root/.m2/repository
    depends_on:
      - postgres
    ports:
      - 8080:8080
    networks:
      - dev
  postgres:
    image: postgres:17.2
    container_name: accountapi-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  maven_data: